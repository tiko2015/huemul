import { ChangeDetectionStrategy, Component } from '@angular/core';
import { TypedBaseListComponent, SharedModule } from '@vendure/admin-ui/core';
// This is the TypedDocumentNode generated by GraphQL Code Generator
import { graphql } from '../../gql';

const getOrganizationBranchListDocument = graphql(`
    query GetOrganizationBranchList($options: OrganizationBranchListOptions) {
        organizationBranchs(options: $options) {
            items {
                id
                createdAt
                updatedAt
                name
                isPrivate
                slug
                parent {
                    id
                    name
                }
                children {
                    name
                }
                logo {
                    id
                }
            }
            totalItems
        }
    }
`);

@Component({
    selector: 'organization-branch-list',
    templateUrl: './organization-branch-list.component.html',
    styleUrls: ['./organization-branch-list.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush,
    standalone: true,
    imports: [SharedModule],
})
export class OrganizationBranchListComponent extends TypedBaseListComponent<
    typeof getOrganizationBranchListDocument,
    'organizationBranchs'
> {
    // Here we set up the filters that will be available
    // to use in the data table
    readonly filters = this.createFilterCollection()
        .addIdFilter()
        .addDateFilters()
        .addFilter({
            name: 'name',
            type: { kind: 'text' },
            label: 'Nombre',
            filterField: 'name',
        })
        .addFilter({
            name: 'isPrivate',
            type: { kind: 'boolean' },
            label: 'Privado',
            filterField: 'isPrivate',
        })
        .connectToRoute(this.route);

    // Here we set up the sorting options that will be available
    // to use in the data table
    readonly sorts = this.createSortCollection()
        .defaultSort('createdAt', 'DESC')
        .addSort({ name: 'createdAt' })
        .addSort({ name: 'updatedAt' })
        .addSort({ name: 'name' })
        .addSort({ name: 'slug' })
        .connectToRoute(this.route);

    constructor() {
        super();
        super.configure({
            document: getOrganizationBranchListDocument,
            getItems: (data) => data.organizationBranchs,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
}
